# mlflow-deployment.yaml

apiVersion: v1
kind: Service
metadata:
  name: mlflow
  namespace: mlops
  labels:
    app: mlflow
spec:
  selector:
    app: mlflow
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  namespace: mlops
  labels:
    app: mlflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow
  template:
    metadata:
      labels:
        app: mlflow
    spec:
      containers:
        - name: mlflow
          image: ghcr.io/mlflow/mlflow:v2.13.0 # Or your preferred stable version
          imagePullPolicy: IfNotPresent
          # This is the CORRECTED and unified command/args block
          command: ["/bin/bash", "-c"]
          args:
            - |
              pip install --no-cache-dir psycopg2-binary boto3 && \
              mlflow server \
              --host 0.0.0.0 \
              --port 5000 \
              --backend-store-uri "$(BACKEND_STORE_URI)" \
              --default-artifact-root "$(ARTIFACT_ROOT)"
              --serve-artifacts

          env:
            # MinIO configuration (keep as is)
            - name: MLFLOW_S3_ENDPOINT_URL
              value: http://minio.mlops.svc.cluster.local:9000
              # value: http://localhost:9000
            - name: AWS_ACCESS_KEY_ID
              value: "minioadmin" # <--- IMPORTANT: Update this
            - name: AWS_SECRET_ACCESS_KEY
              value: "minioadmin123" # <--- IMPORTANT: Update this

            # --- MLflow backend tracking store (NOW PostgreSQL) ---
            - name: BACKEND_STORE_URI
              # Format: postgresql://<user>:<password>@<service-name>.<namespace>.svc.cluster.local:<port>/<database-name>
              value: "postgresql://mlflowuser:mlflowpassword@postgres.mlops.svc.cluster.local:5432/mlflowdb"
            # MLflow artifact root (MinIO S3 bucket)
            - name: ARTIFACT_ROOT
              value: "s3://mlflow/"

          ports:
            - containerPort: 5000
              name: http
              protocol: TCP
          # Add health checks for better reliability (optional but recommended)
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 5000
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: 5000
          #   initialDelaySeconds: 10
          #   periodSeconds: 5